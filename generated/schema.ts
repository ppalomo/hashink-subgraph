// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Autograph extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Autograph entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Autograph entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Autograph", id.toString(), this);
  }

  static load(id: string): Autograph | null {
    return store.get("Autograph", id) as Autograph | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get creators(): Array<Bytes> | null {
    let value = this.get("creators");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set creators(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("creators");
    } else {
      this.set("creators", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (value === null) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(value as string));
    }
  }

  get metadataURI(): string | null {
    let value = this.get("metadataURI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataURI(value: string | null) {
    if (value === null) {
      this.unset("metadataURI");
    } else {
      this.set("metadataURI", Value.fromString(value as string));
    }
  }
}
